// Mocks generated by Mockito 5.4.6 from annotations
// in poyopoyo_weather/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:poyopoyo_weather/application/usecases/fetch_current_weather_usecase.dart'
    as _i8;
import 'package:poyopoyo_weather/application/usecases/fetch_forecast_usecase.dart'
    as _i9;
import 'package:poyopoyo_weather/core/network/api_response.dart' as _i4;
import 'package:poyopoyo_weather/domain/entities/forecast_weather.dart' as _i7;
import 'package:poyopoyo_weather/domain/entities/weather.dart' as _i5;
import 'package:poyopoyo_weather/domain/repositories/weather_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeatherRepository_0 extends _i1.SmartFake
    implements _i2.WeatherRepository {
  _FakeWeatherRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [WeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepository extends _i1.Mock implements _i2.WeatherRepository {
  MockWeatherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.ApiResponse<_i5.Weather>> fetchCurrentWeather({
    required String? cityName,
    String? lang = 'ja',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchCurrentWeather, [], {
              #cityName: cityName,
              #lang: lang,
            }),
            returnValue: _i3.Future<_i4.ApiResponse<_i5.Weather>>.value(
              _i6.dummyValue<_i4.ApiResponse<_i5.Weather>>(
                this,
                Invocation.method(#fetchCurrentWeather, [], {
                  #cityName: cityName,
                  #lang: lang,
                }),
              ),
            ),
          )
          as _i3.Future<_i4.ApiResponse<_i5.Weather>>);

  @override
  _i3.Future<_i4.ApiResponse<List<_i7.ForecastWeather>>> fetchForecast({
    required String? cityName,
    String? lang = 'ja',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchForecast, [], {
              #cityName: cityName,
              #lang: lang,
            }),
            returnValue:
                _i3.Future<_i4.ApiResponse<List<_i7.ForecastWeather>>>.value(
                  _i6.dummyValue<_i4.ApiResponse<List<_i7.ForecastWeather>>>(
                    this,
                    Invocation.method(#fetchForecast, [], {
                      #cityName: cityName,
                      #lang: lang,
                    }),
                  ),
                ),
          )
          as _i3.Future<_i4.ApiResponse<List<_i7.ForecastWeather>>>);
}

/// A class which mocks [FetchCurrentWeatherUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchCurrentWeatherUseCase extends _i1.Mock
    implements _i8.FetchCurrentWeatherUseCase {
  MockFetchCurrentWeatherUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WeatherRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWeatherRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.WeatherRepository);

  @override
  _i3.Future<_i4.ApiResponse<_i5.Weather>> execute(
    String? cityName, {
    String? lang = 'ja',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [cityName], {#lang: lang}),
            returnValue: _i3.Future<_i4.ApiResponse<_i5.Weather>>.value(
              _i6.dummyValue<_i4.ApiResponse<_i5.Weather>>(
                this,
                Invocation.method(#execute, [cityName], {#lang: lang}),
              ),
            ),
          )
          as _i3.Future<_i4.ApiResponse<_i5.Weather>>);
}

/// A class which mocks [FetchForecastUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchForecastUseCase extends _i1.Mock
    implements _i9.FetchForecastUseCase {
  MockFetchForecastUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WeatherRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWeatherRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.WeatherRepository);

  @override
  _i3.Future<_i4.ApiResponse<List<_i7.ForecastWeather>>> execute(
    String? cityName, {
    String? lang = 'ja',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [cityName], {#lang: lang}),
            returnValue:
                _i3.Future<_i4.ApiResponse<List<_i7.ForecastWeather>>>.value(
                  _i6.dummyValue<_i4.ApiResponse<List<_i7.ForecastWeather>>>(
                    this,
                    Invocation.method(#execute, [cityName], {#lang: lang}),
                  ),
                ),
          )
          as _i3.Future<_i4.ApiResponse<List<_i7.ForecastWeather>>>);
}
